using JetBrains.Annotations;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace LinkSoft.OpenBanking.Komercka.Client.ClientRegistration;

/// <summary>
///     Request for SoftwareStatement registration.
/// </summary>
/// <remarks>
///     <para>
///         Currently cannot be auto-generated by NSwag toolchain due to missing support for enum collections serializable as array of strings.
///         GrantTypes and ResponseTypes are problematic as values are defined as enums.
///     </para>
/// </remarks>
[UsedImplicitly(ImplicitUseTargetFlags.WithMembers)]
public class SoftwareStatementRequest
{
    private IDictionary<string, object>? _additionalProperties;

    public SoftwareStatementRequest()
    {
        TokenEndpointAuthMethod = "client_secret_basic";
        GrantTypes =
        [
            "authorization_code",
            "refresh_token"
        ];
        ResponseTypes =
        [
            "code"
        ];
    }

    /// <summary>
    ///     Software Name in CZ.
    /// </summary>
    [JsonPropertyName("softwareName")]
    [Required]
    [StringLength(50, MinimumLength = 5)]
    public string SoftwareName { get; set; } = default!;

    /// <summary>
    ///     Software Name in EN.
    /// </summary>

    [JsonPropertyName("softwareNameEn")]
    [StringLength(50, MinimumLength = 5)]
    public string SoftwareNameEn { get; set; } = default!;

    /// <summary>
    ///     A unique identifier string (e.g., a Universally Unique Identifier (UUID)) assigned by the client developer or software publisher used by registration endpoints to identify the
    ///     client software to be dynamically registered.
    /// </summary>

    [JsonPropertyName("softwareId")]
    [Required(AllowEmptyStrings = true)]
    [StringLength(64)]
    public string SoftwareId { get; set; } = default!;

    /// <summary>
    ///     A version identifier string for the client software identified by softwareId.  The value of the softwareVersion SHOULD change on any update to the client software identified
    ///     by the same softwareId.
    /// </summary>

    [JsonPropertyName("softwareVersion")]
    [Required]
    [StringLength(30, MinimumLength = 1)]
    public string SoftwareVersion { get; set; } = default!;

    /// <summary>
    ///     Software URL.
    /// </summary>

    [JsonPropertyName("softwareUri")]
    public Uri SoftwareUri { get; set; } = default!;

    /// <summary>
    ///     Array of redirection URI strings for use in redirect-based flows such as the authorization code.
    /// </summary>

    [JsonPropertyName("redirectUris")]
    [Required]
    public ICollection<Uri> RedirectUris { get; set; } = new Collection<Uri>();

    /// <summary>
    ///     String indicator of the requested authentication method for the token endpoint.
    /// </summary>

    [JsonPropertyName("tokenEndpointAuthMethod")]
    public string TokenEndpointAuthMethod { get; set; }

    /// <summary>
    ///     Array of OAuth 2.0 grant type strings that the client can use.
    /// </summary>

    [JsonPropertyName("grantTypes")]
    public ICollection<string> GrantTypes { get; set; }

    /// <summary>
    ///     Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
    /// </summary>

    [JsonPropertyName("responseTypes")]
    public ICollection<string> ResponseTypes { get; set; }

    /// <summary>
    ///     URI string representing the endpoint where registration data is sent.
    /// </summary>

    [JsonPropertyName("registrationBackUri")]
    [Required(AllowEmptyStrings = true)]
    public Uri RegistrationBackUri { get; set; } = default!;

    /// <summary>
    ///     Array of strings representing ways to contact people responsible for this client, typically email addresses.
    /// </summary>

    [JsonPropertyName("contacts")]
    [Required]
    [MinLength(1)]
    [MaxLength(2)]
    public ICollection<string> Contacts { get; set; } = new Collection<string>();

    /// <summary>
    ///     URL string that references a logo for the client.
    /// </summary>

    [JsonPropertyName("logoUri")]
    public Uri LogoUri { get; set; } = default!;

    /// <summary>
    ///     URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the
    ///     end-user accepts when authorizing the client.
    /// </summary>

    [JsonPropertyName("tosUri")]
    public Uri TosUri { get; set; } = default!;

    /// <summary>
    ///     URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
    /// </summary>

    [JsonPropertyName("policyUri")]
    public Uri PolicyUri { get; set; } = default!;

    [JsonExtensionData]
    public IDictionary<string, object> AdditionalProperties
    {
        get => _additionalProperties ??= new Dictionary<string, object>();
        set => _additionalProperties = value;
    }
}