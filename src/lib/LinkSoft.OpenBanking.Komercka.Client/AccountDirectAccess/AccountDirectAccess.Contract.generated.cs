//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace LinkSoft.OpenBanking.Komercka.Client.AccountDirectAccess
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAccountDirectAccessClient
    {
        /// <summary>
        /// Transaction history
        /// </summary>
        /// <remarks>
        /// Returns transaction history based on input parameters. Sorting is based on transaction date, from older to newer transactions. Currently only transactions up to 2 years old are returned. In case older transactions are requested (using parameters fromDate/toDate), error is returned.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="toDateTime">End date and time of returned transaction history. Must not be less than 'fromDateTime'. Format: yyyy-mm-ddThh:mm:ss.msZ (Z denotes a UTC offset of 00:00).</param>
        /// <param name="fromDateTime">Start date and time of returned transaction history. Must not be greater than 'toDateTime'. Format: yyyy-mm-ddThh:mm:ss.msZ (Z denotes a UTC offset of 00:00).</param>
        /// <param name="page">Current transaction history page. Page starts with 0 (first page).</param>
        /// <param name="size">Number of transactions per page. Default value is 100 transactions per page.</param>
        /// <returns>OK.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageSlice> GetTransactionsAsync(string accountId, System.DateTimeOffset? toDateTime, System.DateTimeOffset? fromDateTime, int page, int? size);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transaction history
        /// </summary>
        /// <remarks>
        /// Returns transaction history based on input parameters. Sorting is based on transaction date, from older to newer transactions. Currently only transactions up to 2 years old are returned. In case older transactions are requested (using parameters fromDate/toDate), error is returned.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="toDateTime">End date and time of returned transaction history. Must not be less than 'fromDateTime'. Format: yyyy-mm-ddThh:mm:ss.msZ (Z denotes a UTC offset of 00:00).</param>
        /// <param name="fromDateTime">Start date and time of returned transaction history. Must not be greater than 'toDateTime'. Format: yyyy-mm-ddThh:mm:ss.msZ (Z denotes a UTC offset of 00:00).</param>
        /// <param name="page">Current transaction history page. Page starts with 0 (first page).</param>
        /// <param name="size">Number of transactions per page. Default value is 100 transactions per page.</param>
        /// <returns>OK.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageSlice> GetTransactionsAsync(string accountId, System.DateTimeOffset? toDateTime, System.DateTimeOffset? fromDateTime, int page, int? size, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List of selected accounts.
        /// </summary>
        /// <remarks>
        /// List of selected accounts used for API service. Accounts are selected within service registration.
        /// </remarks>
        /// <returns>OK.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List of selected accounts.
        /// </summary>
        /// <remarks>
        /// List of selected accounts used for API service. Accounts are selected within service registration.
        /// </remarks>
        /// <returns>OK.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Subscribe to receive asynchronous events
        /// </summary>
        /// <remarks>
        /// Subscribe to receive asynchronous events
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <returns>Subscription created</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionInfo> CreateSubscriptionAsync(string accountId, SubscriptionRequest? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe to receive asynchronous events
        /// </summary>
        /// <remarks>
        /// Subscribe to receive asynchronous events
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <returns>Subscription created</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionInfo> CreateSubscriptionAsync(string accountId, SubscriptionRequest? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get subscription information
        /// </summary>
        /// <remarks>
        /// Get subscription information
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="subscriptionId">Subscription ID. Format: GUID 128-bit: 8-4-4-4-12</param>
        /// <returns>Subscription information</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionInfo> GetSubscriptionInfoAsync(string accountId, string subscriptionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get subscription information
        /// </summary>
        /// <remarks>
        /// Get subscription information
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="subscriptionId">Subscription ID. Format: GUID 128-bit: 8-4-4-4-12</param>
        /// <returns>Subscription information</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionInfo> GetSubscriptionInfoAsync(string accountId, string subscriptionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unsubscribe from receiving asynchronous events
        /// </summary>
        /// <remarks>
        /// Unsubscribe from receiving asynchronous events
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="subscriptionId">Subscription ID. Format: GUID 128-bit: 8-4-4-4-12</param>
        /// <returns>Subscription deleted successfully.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubscriptionAsync(string accountId, string subscriptionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe from receiving asynchronous events
        /// </summary>
        /// <remarks>
        /// Unsubscribe from receiving asynchronous events
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="subscriptionId">Subscription ID. Format: GUID 128-bit: 8-4-4-4-12</param>
        /// <returns>Subscription deleted successfully.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubscriptionAsync(string accountId, string subscriptionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Actual balance
        /// </summary>
        /// <remarks>
        /// Returns the current account balance of the client’s account.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountBalance>> GetBalancesAsync(string accountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Actual balance
        /// </summary>
        /// <remarks>
        /// Returns the current account balance of the client’s account.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountBalance>> GetBalancesAsync(string accountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Detail information about statements for account.
        /// </summary>
        /// <remarks>
        /// Returns information of specific account statements.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="dateFrom">Date of returned account statements information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> GetAccountStatementsAsync(string accountId, System.DateTimeOffset dateFrom);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detail information about statements for account.
        /// </summary>
        /// <remarks>
        /// Returns information of specific account statements.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="dateFrom">Date of returned account statements information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> GetAccountStatementsAsync(string accountId, System.DateTimeOffset dateFrom, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Statement in PDF format
        /// </summary>
        /// <remarks>
        /// Use statement ID for return specific statement in PDF format.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="statementId">Statement ID.</param>
        /// <returns>PDF document with requested statement is returned.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetStatementPDFAsync(string accountId, long statementId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Statement in PDF format
        /// </summary>
        /// <remarks>
        /// Use statement ID for return specific statement in PDF format.
        /// </remarks>
        /// <param name="accountId">IBAN represented as unique ID, which is returned from resource account-ids.</param>
        /// <param name="statementId">Statement ID.</param>
        /// <returns>PDF document with requested statement is returned.</returns>
        /// <exception cref="AccountDirectAccessApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetStatementPDFAsync(string accountId, long statementId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Accounts : System.Collections.ObjectModel.Collection<Account>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account
    {

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(400)]
        public string AccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string Iban { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nameI18N")]
        public string? NameI18N { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productI18N")]
        public string? ProductI18N { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("eventApiUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}(\.[a-zA-Z0-9()]{1,6})?\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)")]
        public string EventApiUrl { get; set; } = default!;

        /// <summary>
        /// Authorization token for Event API access. Used as HTTP header 'x-api-key', see Event API specification.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventApiKey")]
        [System.ComponentModel.DataAnnotations.Required]
        public string EventApiKey { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})$")]
        public string SubscriptionId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eventApiUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}(\.[a-zA-Z0-9()]{1,6})?\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)")]
        public string EventApiUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eventApiVersion")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventApiVersion { get; set; } = default!;

        /// <summary>
        /// - ACTIVE - notifications are active (expected status)
        /// <br/>- SUSPENDED - failed to call event API (or event API not respond within 5s); multiple attempts (to call event API) are being made; in case of success, status will change to ACTIVE; in case of failure (all attempts), status will change to STOPPED
        /// <br/>- STOPPED - all attempts failed, final status; new registration (POST /event-subscriptions) is required
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SubscriptionInfoStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusNarrative")]
        public string? StatusNarrative { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The list of transactions on the client's account according to the filter set in the request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageSlice
    {

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AccountTransaction> Content { get; set; } = new System.Collections.ObjectModel.Collection<AccountTransaction>();

        /// <summary>
        /// Total number of pages.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        /// <summary>
        /// Actual page number. Number of the first page is 0.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        /// <summary>
        /// Size of the page (how many elements are shown per page).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        /// <summary>
        /// Number of elements on the current page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfElements")]
        public int NumberOfElements { get; set; } = default!;

        /// <summary>
        /// Is the first page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first")]
        public bool First { get; set; } = default!;

        /// <summary>
        /// Is the last page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last")]
        public bool Last { get; set; } = default!;

        /// <summary>
        /// Is actual page empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("empty")]
        public bool Empty { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates whether the account balance is positive or negative
    /// <br/>
    /// <br/>CODE:
    /// <br/>* CREDIT - Accontunt balance is &amp;gt; 0 or Account ballance = 0
    /// <br/>* DEBIT - Account balance is &amp;lt; 0
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreditDebitIndicator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT")]
        DEBIT = 1,

    }

    /// <summary>
    /// Detail information about a single statement (including the statement identification used for PDF file download).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Statement
    {
        /// <summary>
        /// Statement issue date.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issued")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Issued { get; set; } = default!;

        /// <summary>
        /// Statement sequence number (can be 0 for one-time statements).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        public int SequenceNumber { get; set; } = default!;

        /// <summary>
        /// Statement total page count.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pagesCount")]
        public int PagesCount { get; set; } = default!;

        /// <summary>
        /// Unique ID of the PDF statement.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statementId")]
        public long StatementId { get; set; } = default!;

        /// <summary>
        /// Archived statement flag (regular statements = false; archived = true).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archive")]
        public bool Archive { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains the information about statements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementsResponse : System.Collections.ObjectModel.Collection<Statement>
    {

    }

    /// <summary>
    /// Transaction references
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionReferences
    {
        /// <summary>
        /// Identification of the payment assigned by bank
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountServicer")]
        public string? AccountServicer { get; set; } = default!;

        /// <summary>
        /// Unique identification of the payment/transaction provided by the client who initiated the payment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endToEndIdentification")]
        public string? EndToEndIdentification { get; set; } = default!;

        /// <summary>
        /// Variable symbol
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variable")]
        public string? Variable { get; set; } = default!;

        /// <summary>
        /// Constant symbol
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("constant")]
        public string? Constant { get; set; } = default!;

        /// <summary>
        /// Specific symbol
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("specific")]
        public string? Specific { get; set; } = default!;

        /// <summary>
        /// Message to a payee / reference to receiver.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiver")]
        public string? Receiver { get; set; } = default!;

        /// <summary>
        /// Description for me
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("myDescription")]
        public string? MyDescription { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Type of bank account.
    /// <br/>CODE:
    /// <br/>* KB - KB accounts
    /// <br/>* AG - aggregate accounts
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KB")]
        KB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 1,

    }

    /// <summary>
    /// The single account transaction details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountTransaction
    {
        /// <summary>
        /// The last transaction history update. Datetime is in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastUpdated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccountType AccountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entryReference")]
        public string? EntryReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string Iban { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditDebitIndicator")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CreditDebitIndicator CreditDebitIndicator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionType TransactionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankTransactionCode")]
        public BankTransactionCode? BankTransactionCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount Amount { get; set; } = new CurrencyAmount();

        /// <summary>
        /// The date the payment was processed/accounted by bank in ISODate format (''YYYY-MM-DD'').
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BookingDate { get; set; } = default!;

        /// <summary>
        /// The payment due date in ISODate format (''YYYY-MM-DD'').
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("instructed")]
        public CurrencyAmount? Instructed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reversalIndicator")]
        public bool? ReversalIndicator { get; set; } = default!;

        /// <summary>
        /// Status of the payment on account from bank point of view.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("counterParty")]
        public TransactionCounterparty? CounterParty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("references")]
        public TransactionReferences? References { get; set; } = default!;

        /// <summary>
        /// Additional information about transaction provided by bank
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additionalTransactionInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? AdditionalTransactionInformation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cardTransactionDetails")]
        public CardTransactionDetails? CardTransactionDetails { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Transaction counterparty details. Not all fields may be available for all transactions (e.g. for card transaction).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionCounterparty
    {

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? Iban { get; set; } = default!;

        /// <summary>
        /// Name of the counterparty
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountNo")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? AccountNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankBic")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? BankBic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? BankCode { get; set; } = default!;

        /// <summary>
        /// Counterparty account servicing institution name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string? BankName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INTEREST")]
        INTEREST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEE")]
        FEE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC")]
        DOMESTIC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FOREIGN")]
        FOREIGN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPA")]
        SEPA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD")]
        CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    /// <summary>
    /// Amount with ISO currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyAmount
    {
        /// <summary>
        /// The amount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Credit line information (allowed debit).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditLine : CurrencyAmount
    {

    }

    /// <summary>
    /// The list of all the client's balances for requested account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountBalancesResponse : System.Collections.ObjectModel.Collection<AccountBalance>
    {

    }

    /// <summary>
    /// Account balance for specific balance type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountBalance
    {
        /// <summary>
        /// Code of the account balance type.
        /// <br/>
        /// <br/>CODE:
        /// <br/>* PREVIOUSLY_CLOSED_BOOK - Previously Closed Book
        /// <br/>* CLOSING_BOOKED - Closing Booked
        /// <br/>* CLOSING_AVAILABLE - Closing Available
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccountBalanceType Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditDebitIndicator")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CreditDebitIndicator CreditDebitIndicator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount Amount { get; set; } = new CurrencyAmount();

        /// <summary>
        /// Date the balance information was valid for. Datetime is in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ValidAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditLine")]
        public CreditLine? CreditLine { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Transaction code
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankTransactionCode
    {
        /// <summary>
        /// Transaction code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuer")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BankTransactionCodeIssuer? Issuer { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The identification of the issuer of the transaction code
    /// <br/>- CBA - Code of the transaction defined by CBA (Czech Bank Association) associated with specific payment. Every bank uses its own LOV for transaction codes which is derived from 1st to 3rd level of the transaction codes LOV defined by CBA standar for CAMT.053. For more information see https://mojebanka.kb.cz/file/cs/format_xml_vypis_ciselnik_trn.pdf
    /// <br/>- OTHER
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BankTransactionCodeIssuer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CBA")]
        CBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

    }

    /// <summary>
    /// Details related to a CARD transaction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CardTransactionDetails
    {
        /// <summary>
        /// Expiration date of a pending state transaction. ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("holdExpirationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? HoldExpirationDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The parent element contains a collection of all error states.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Error>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specific error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Optional error code (only for business exceptions).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Optional information about error. Contains additional information specific to a particular error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]
        public AdditionalInfo? AdditionalInfo { get; set; } = default!;

        /// <summary>
        /// Text description of the error. It is not meant to be interpreted to the end user but to enrich the error log.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionInfoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STOPPED")]
        STOPPED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountBalanceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PREVIOUSLY_CLOSED_BOOK")]
        PREVIOUSLY_CLOSED_BOOK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSING_BOOKED")]
        CLOSING_BOOKED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSING_AVAILABLE")]
        CLOSING_AVAILABLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalInfo
    {
        /// <summary>
        /// The input parameter name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parameterName")]
        public string? ParameterName { get; set; } = default!;

        /// <summary>
        /// Rejected value of the parameter
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rejectedValue")]
        public string? RejectedValue { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625